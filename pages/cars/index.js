import React, { useState } from "react";
import SelectBox from "../../common/SelectBox";
import { categories } from "../../server/categories";
import SearchCar from "../../components/SearchCar";
import Slider from "@mui/material/Slider";
import GetLowHighPrice from "../../common/GetLowHighPrice";
import Head from "next/head";
import { useSelector } from "react-redux";
import CarItem from "../../components/CarItem";

function CarCategoryPage() {
  const cars = useSelector((state) => state.carReducer.cars);
  const [carsFiltered, setCarsFiltered] = useState(cars);
  const [priceValue, setPriceValue] = useState([0, GetLowHighPrice().max]);
  const [typeValue, setTypeValue] = useState([]);

  const rangeSelector = (event, newValue) => {
    setPriceValue(newValue);
  };

  const resetFilter = () => {
    setCarsFiltered(cars);
    setPriceValue([0, GetLowHighPrice().max]);
  };

  const priceFilter = () => {
    const filteredItems = cars.filter(
      (car) =>
        car.final_price >= priceValue[0] && car.final_price <= priceValue[1]
    );
    setCarsFiltered(filteredItems);
  };

  const typeFilter = (data) => {
    if(data.length === 0){
      setCarsFiltered(cars)
      return
    }
    const filteredTypeItems = cars.filter(el => {
      return data.indexOf(el.category) !== -1;
   });
   setCarsFiltered(filteredTypeItems)
  };

  const setTypeArray = (name) => {
    const newArray = [...typeValue];
    const index = typeValue.indexOf(name);
    if (index === -1) {
      newArray.push(name);
    } else {
      newArray.splice(index, 1);
    }
    setTypeValue(newArray);
    typeFilter(newArray);
  
  };

  return (
    <>
      <Head>
        <title>Rent Car Website / Category Page </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="grid grid-cols-5 gap-5">
        <div className="hidden lg:block bg-white dark:bg-[#243137] dark:text-white p-8 col-span-1 shadow-sm rounded-b-md">
          <div>
            <p className="mb-3 text-gray-400 dark:text-white">TYPE</p>
            {categories?.map((cat) => {
              return (
                <SelectBox
                  key={cat.id}
                  title={cat.category}
                  quantity={cat.quantity}
                  setTypeArray={setTypeArray}
                />
              );
            })}
          </div>
          <p className="mb-12 mt-10 text-gray-400 dark:text-white">Select your Price Range :</p>

          <Slider
            value={priceValue}
            onChange={rangeSelector}
            valueLabelDisplay="on"
            step={5}
            max={GetLowHighPrice().max}
          />
          <p className="text-sm">Start Price : {priceValue[0]} $</p>
          <p className="text-sm my-2">Final Price : {priceValue[1]} $</p>
          <button
            onClick={() => priceFilter()}
            className="bg-[#3563E9] w-full text-sm rounded-md border-2 border-[#3563E9] text-white p-1 hover:bg-white hover:text-[#3563E9] transition-all duration-200"
          >
            SUBMIT
          </button>
          <button
            onClick={() => resetFilter()}
            className="bg-gray-500 w-full text-sm mt-3 rounded-md border-2 border-gray-500 text-white p-1 hover:bg-white hover:text-gray-500 transition-all duration-200"
          >
            RESET
          </button>
        </div>

        <div className="pr-3 lg:col-span-4 col-span-5">
          
          <div className="container mx-auto xl:max-w-screen-2xl grid gap-8 grid-cols-1 md:grid-cols-2 lg:grid-cols-3  mt-5">
            {carsFiltered?.map((carItem) => {
              return (
                <CarItem
                  heartIsShow={false}
                  key={carItem.id}
                  carItem={carItem}
                />
              );
            })}
          </div>
        </div>
      </div>
    </>
  );
}

export default CarCategoryPage;
